name: "[Cronicas] CI/CD"

on:
  push:
    branches: 
      - main

jobs:
  ci:
    name: Cronicas CI
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm install

      - name: Validate Repository Structure
        uses: ./.github/actions/validate-repo

      - name: Run Linter
        run: npm run lint
        
      - name: Run Tests
        run: npm test

      - name: Build Application
        run: |
          npm prune --production
          mkdir -p build
          cp -r src/ package.json package-lock.json Dockerfile build/
          
      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: build/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: build/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}

  cd:
    name: Cronicas CD
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app-url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
            
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: build

      - name: Mask AWS Account ID
        run: |
          echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Upload Artifact to S3
        run: |
          cd build/
          zip -r ../cronicas-app-v${{ github.run_number }}.zip .
          cd ..
          aws s3 cp cronicas-app-v${{ github.run_number }}.zip s3://cronicas-app-bucket/

      - name: Install Elastic Beanstalk CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awsebcli --upgrade --user
          export PATH=$PATH:$HOME/.local/bin          

      - name: Create Elastic Beanstalk Application (if not exists)
        run: |
          if ! eb list | grep -q "cronicas-app"; then
            eb init -p node.js cronicas-app --region sa-east-1
          fi
          if ! eb status cronicas-app-env; then
            eb create cronicas-app-env --region sa-east-1
          else
            echo "Elastic Beanstalk environment 'cronicas-app-env' already exists."
          fi

      - name: Deploy from S3 to Elastic Beanstalk
        run: |
          ARTIFACT_URL="s3://cronicas-app-bucket/cronicas-app-v${{ github.run_number }}.zip"
          aws elasticbeanstalk create-application-version --application-name cronicas-app --version-label v${{ github.run_number }} --source-bundle S3Bucket=cronicas-app-bucket,S3Key=cronicas-app-v${{ github.run_number }}.zip
          aws elasticbeanstalk update-environment --environment-name cronicas-app-env --version-label v${{ github.run_number }}
          aws elasticbeanstalk wait environment-updated --environment-name cronicas-app-env

      - name: Get Application URL
        id: app-url
        run: |
          APP_URL=$(aws elasticbeanstalk describe-environments --environment-names cronicas-app-env --query 'Environments[0].CNAME' --output text)
          echo "Application URL: $APP_URL"
          echo "app-url=http://$APP_URL" >> $GITHUB_ENV

      - name: Post-deploy Status
        run: |
          echo "Application successfully deployed to ${{ env.app-url }}"       